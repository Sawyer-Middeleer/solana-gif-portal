{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gsCAAe,MAA0B,yC,iDCWjCA,EAAkBC,IAAlBD,cAEFE,EAAMC,OAAOC,OAAOC,EAAGC,SAASC,WAChCC,EAAS,IAAIC,WAAWP,GACxBQ,EAAcT,IAAKU,QAAQC,cAAcJ,GAGzCK,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAIjBC,EAAiB,eACjBC,EAAY,8BAA0BD,GAsN7BE,EApNH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAOFH,EAAOI,QAAQ,CAAEC,eAAe,IAP9B,OAOnBC,EAPmB,OAQzBJ,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAMrBhB,EAAiBc,EAASC,UAAUC,YAhBX,gCAmB3BC,MAAM,8DAnBqB,0DAsB7BP,QAAQQ,MAAR,MAtB6B,0DAAH,qDA0BxBC,EAAa,uCAAG,gCAAAb,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YANlB,2CAAH,qDAUbI,EAAO,uCAAG,8BAAAd,EAAA,yDACY,IAAtBL,EAAWoB,OADD,uBAEZX,QAAQC,IAAI,gCAFA,iCAKdD,QAAQC,IAAI,gBAAiBV,GALf,SAONqB,EAAWC,IACXC,EAAU,IAAIC,IAAQpC,EAAKF,EAAWmC,GARhC,SAUNE,EAAQE,IAAIC,OAAO1B,EAAY,CACnC2B,SAAU,CACR5C,YAAaA,EAAY+B,UACzBc,KAAMP,EAASQ,OAAOf,aAbd,cAgBZL,QAAQC,IAAI,uCAAwCV,GAhBxC,UAkBN8B,IAlBM,0DAoBZrB,QAAQC,IAAI,yBAAZ,MApBY,0DAAH,qDAwBPqB,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRhC,EAAcgC,IAGVX,EAAc,WAClB,IAAMa,EAAa,IAAIC,aAAW7C,EAASE,GAI3C,OAHiB,IAAI4C,IACnBF,EAAY7B,OAAOC,OAAQd,IAKzB6C,EAAgB,uCAAG,8BAAAjC,EAAA,sEAEfgB,EAAWC,IACXC,EAAU,IAAIC,IAAQpC,EAAKF,EAAWmC,GAC5CZ,QAAQC,IAAI,QAJS,SAKfa,EAAQE,IAAIc,cAAc,CAC9BZ,SAAU,CACR5C,YAAaA,EAAY+B,UACzBc,KAAMP,EAASQ,OAAOf,UACtB0B,cAAenE,EAAcoE,WAE/BC,QAAS,CAAC3D,KAXS,cAarB0B,QAAQC,IAAI,wCAAyC3B,EAAY+B,UAAUC,YAbtD,SAcfe,IAde,yDAiBrBrB,QAAQC,IAAI,sCAAZ,MAjBqB,0DAAH,qDA2EtBiC,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAvC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOuC,iBAAiB,OAAQD,GACzB,kBAAMtC,OAAOwC,oBAAoB,OAAQF,MAC/C,IAEH,IAAMd,EAAU,uCAAG,gCAAAzB,EAAA,sEAETgB,EAAWC,IACXC,EAAU,IAAIC,IAAQpC,EAAKF,EAAWmC,GAH7B,SAIOE,EAAQwB,QAAQhE,YAAYiE,MAAMjE,EAAY+B,WAJrD,OAITiC,EAJS,OAMftC,QAAQC,IAAI,kBAAmBqC,GAC/B5C,EAAW4C,EAAQ7C,SAPJ,kDAUfO,QAAQC,IAAI,wBAAZ,MACAP,EAAW,MAXI,0DAAH,qDAsBhB,OAPAwC,qBAAU,WACJ7C,IACFW,QAAQC,IAAI,uBACZoB,OAED,CAAChC,IAGF,qBAAKmD,UAAU,MAAf,SAED,sBAAKA,UAAWnD,EAAgB,mBAAqB,YAArD,UACK,sBAAKmD,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,6BACA,mBAAGA,UAAU,WAAb,6HAIEnD,GA7FR,wBACEmD,UAAU,mCACVC,QAAShC,EAFX,+BA8FOpB,IApFS,OAAZI,EAEA,qBAAK+C,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,kEASF,sBAAKW,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACnB,GACTA,EAAMoB,iBACNjC,KAHJ,UAME,uBACEkC,KAAK,OACLC,YAAY,sBACZrB,MAAOjC,EACPuD,SAAUxB,IAEZ,wBAAQsB,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SAEG/C,EAAQsD,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAKT,UAAU,WAAf,SACE,qBAAKU,IAAKF,EAAKG,WADcF,eAsDrC,sBAAKT,UAAU,mBAAf,UACE,qBAAKY,IAAI,eAAeZ,UAAU,eAAeU,IAAKG,IACtD,mBACEb,UAAU,cACVc,KAAMpE,EACNuC,OAAO,SACP8B,IAAI,aAJN,6BAKetE,cCxOzBuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e8ae9403.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\nimport idl from './idl.json';\r\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\r\nimport {\r\n  Program, Provider, web3\r\n} from '@project-serum/anchor';\r\nimport kp from './keypair.json';\r\n\r\n// const { SystemProgram, Keypair } = web3;\r\nconst { SystemProgram } = web3;\r\n\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n\r\n// Get our program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\"\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = 'sawyermidddd';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          /*\r\n           * Set the user's publicKey in state to be used later\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n  \r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No valid content link given!\")\r\n      return\r\n    }\r\n    console.log('Content link:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n  \r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"Content successfully sent to program\", inputValue)\r\n  \r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending content:\", error)\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n  \r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't be initialized.\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      )\r\n    } \r\n    // Otherwise, we're good! Account exists. User can submit GIFs.\r\n    else {\r\n      return(\r\n        <div className=\"connected-container\">\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              sendGif();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Submit your content\"\r\n              value={inputValue}\r\n              onChange={onInputChange}\r\n            />\r\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <div className=\"gif-grid\">\r\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  const getGifList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n  \r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error)\r\n      setGifList(null);\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching content...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\t\t\t{/* This was solely added for some styling fanciness */}\r\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">Infinite Thread</p>\r\n          <p className=\"sub-text\">\r\n            The world's memories and experiences, recorded as a stream of consciousness on the immutable Solana blockchain\r\n          </p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built by @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}